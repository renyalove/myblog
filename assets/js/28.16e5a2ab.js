(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{512:function(t,o,e){"use strict";e.r(o);var _=e(4),s=Object(_.a)({},(function(){var t=this,o=t.$createElement,e=t._self._c||o;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"理解原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理解原型链"}},[t._v("#")]),t._v(" 理解原型链")]),t._v(" "),e("h4",{attrs:{id:"prototype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" "),e("code",[t._v("prototype")])]),t._v(" "),e("p",[t._v("首先来说说"),e("code",[t._v("prototype")]),t._v("属性，不像每个对象都有"),e("code",[t._v("__proto__")]),t._v("属性来标识自己所继承的原型，只有函数才有"),e("code",[t._v("prototype")]),t._v("属性。")]),t._v(" "),e("h4",{attrs:{id:"proto"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),e("code",[t._v("__proto__")])]),t._v(" "),e("p",[t._v("翻译出来就是每个JS对象一定对应一个原型对象，并从原型对象继承属性和方法。好啦，既然有这么一个原型对象，那么对象怎么和它对应的？")]),t._v(" "),e("p",[e("strong",[t._v("对象"),e("code",[t._v("__proto__")]),t._v("属性的值就是它所对应的原型对象。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" one "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" two "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\none"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\ntwo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\none"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" one"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),e("h4",{attrs:{id:"function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[t._v("#")]),t._v(" "),e("code",[t._v("Function")])]),t._v(" "),e("p",[t._v("Function"),e("strong",[t._v("本身就是函数")]),t._v("，"),e("code",[t._v("Function.__proto__")]),t._v("是标准的内置对象"),e("code",[t._v("Function.prototype")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("Function.prototype.__proto__")]),t._v("是标准的内置对象"),e("code",[t._v("Object.prototype")]),t._v("。")]),t._v(" "),e("p",[t._v("对于这两句话的理解：")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("Function.prototype")]),t._v("和"),e("code",[t._v("Function.__proto__")]),t._v("都指向"),e("code",[t._v("Function.prototype")]),t._v("，这就是鸡和蛋的问题怎么出现的。")]),t._v(" "),e("li",[e("code",[t._v("Object.prototype.__proto__ === null")]),t._v("，说明原型链到"),e("code",[t._v("Object.prototype")]),t._v("终止。")])]),t._v(" "),e("h3",{attrs:{id:"object和function的鸡和蛋的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object和function的鸡和蛋的问题"}},[t._v("#")]),t._v(" "),e("code",[t._v("Object")]),t._v("和"),e("code",[t._v("Function")]),t._v("的鸡和蛋的问题")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("原型链的尽头（root）是"),e("code",[t._v("Object.prototype")]),t._v("。"),e("strong",[t._v("所有对象均从"),e("code",[t._v("Object.prototype")]),t._v("继承属性。")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Function.prototype")]),t._v("和"),e("code",[t._v("Function.__proto__")]),t._v("为"),e("strong",[t._v("同一对象")]),e("code",[t._v("Function.prototype")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Function.prototype")]),t._v("直接继承root（"),e("code",[t._v("Object.prototype")]),t._v("）。所以："),e("code",[t._v("Function.prototype.__proto__")]),t._v("=="),e("code",[t._v("Object.prototype")]),t._v("。")])])]),t._v(" "),e("p",[e("strong",[t._v("最后总结：先有"),e("code",[t._v("Object.prototype")]),t._v("（原型链顶端），"),e("code",[t._v("Function.prototype")]),t._v("继承"),e("code",[t._v("Object.prototype")]),t._v("而产生，最后，"),e("code",[t._v("Function")]),t._v("和"),e("code",[t._v("Object")]),t._v("和其它构造函数继承"),e("code",[t._v("Function.prototype")]),t._v("而产生。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Object.__proto__==Function.prototype//true\n`Function.__proto__`==Function.prototype//true\n")])])]),e("p",[t._v("原文：http://www.mollypages.org/tutorials/js.mp")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/10/1648412f2ed72c1d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"原型链"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.mollypages.org/tutorials/jsobj.jpg",alt:"原型链"}})])])}),[],!1,null,null,null);o.default=s.exports}}]);